/**
 *
 * =====
 * Flexbox stuff
 * =====
 *
 * Tutorial: https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties
 *
 * Add a .flex-wrap-* class to a container to enable flexbox.
 * Child elements will immediately have equal height.
 * See example classes below.
 * ---
 * flex-wrap|flex-wrap-xs - global
 * flex-wrap-lg - min-width: 1200px
 * flex-wrap-xs-md - min-width: 320px, max-width: 1199px
 *
 *
 * Use these flex CONTAINER mixins for automatic vendor prefixes.
 * ---
 *
 * * flex-direction(row|row-reverse|column|column-reverse)
 * * flex-wrap(nowrap|wrap|wrap-reverse)
 * * SHORTHAND flex-flow(flex-direction flex-wrap) e.g. flex-flow(row, wrap)
 *
 * * justify-content(flex-start|flex-end|center|space-between|space-around)
 * * align-items(stretch|flex-start|flex-end|center|baseline)
 * * align-content(flex-start|flex-end|center|space-between|space-around)
 *
 *
 * Use these flex ITEM mixins for automatic vendor prefixes.
 * ---
 *
 * * order(<integer>)
 * * flex-grow(<integer>)
 * * flex-shrink(<integer>)
 * * flex-basis(auto|<width>)
 */

$flex_container_breakpoints:
(
	('xs', 320px),
	('sm', 768px),
	('md', 992px),
	('lg', 1200px)
);

/**
 *
 * =====
 * Mixins
 * =====
 *
 * active-color($color, $active, $type: 'color')
 * ---
 * $color: default color
 * $active: active/focus color
 * $type: color|background
 * Set active and focus state of an element
 * If active is not set, it'll be 20% darker than the default color
 *
 *
 * backface-visibility
 * ---
 * $visibility
 * Set it to hidden if an animation is flickering
 *
 *
 * box-shadow($shadow...)
 * ---
 * Set box shadows
 *
 *
 * box-sizing($boxmodel)
 * ---
 * Set box model for the element
 *
 *
 * center($axis: null)
 * ---
 * $axis: 'H'|'V'|null
 * H - absolute position element horizontally
 * V - absolute position element vertically
 * null - absolute position element on both axes
 *
 *
 * content-columns($column-count, $column-gap: 15px)
 * ---
 * $column-count: number of CSS columns
 * $column-gap: Gutter between columns
 * Automatically divide content into separate columns
 *
 *
 * cover-image
 * ---
 * Lets <img> tags emulate background-size:cover
 * by forcing them to be at least as big as the container
 * while letting them retain their aspect ratio.
 * Also sets object-fit: cover, but it's not supported in IE at all.
 *
 *
 * flex
 * ---
 * Turn element into a flexbox container
 *
 *
 * modalfix
 * ---
 * Include this if ofw.alert modal has text overflowing
 *
 *
 * placeholder-color($color)
 * ---
 * Set placeholder text color
 *
 *
 * radius($top-left: 5px, $top-right, $bottom-right, $bottom-left)
 * ---
 * $top-left, $top-right, $bottom-right, $bottom-left: Corner radius in pixels or percentage
 * Adds border radius to element
 * If only $top-left is provided, it will be applied to all corners
 *
 *
 * rotate($x) | rotate($x, $y)
 * ---
 * $x, $y: angle of rotation; uses deg, e.g. 20deg
 * Rotate an element.
 * If you use 1 parameter, it's used for both axes
 *
 *
 * rwd-typo($breakpoint: 480px, $offset: null, $h1: 36px, $h2: 30px, $h3: 24px, $h4: 18px, $h5: 14px, $h6: 12px)
 * ---
 * $breakpoint: the media query max-width in pixels
 * $h1-$h6: relative font-size in pixels. If it's null, font size will stay the same everywhere
 * Automatically generate font sizes for header elements below a viewport width
 * Font sizes shrink proportionally with the viewport width
 *
 *
 * scale($x) | scale($x, $y)
 * ---
 * $x, $y: angle of rotation; uses deg, e.g. 20deg
 * Scale an element.
 * If you use 1 parameter, it's used for both axes
 *
 *
 * skew($x) | skew($x, $y)
 * ---
 * $x, $y: uses deg, e.g. 20deg
 * Distort an element.
 * If you use 1 parameter, it's used for both axes
 *
 *
 * transform-origin($origin)
 * ---
 * Where the transform is applied from
 *
 *
 * translate($x) | translate($x, $y)
 * ---
 * $x, $y: translation distance
 * Translate an element.
 * If you use 1 parameter, it's used for both axes
 *
 *
 * trans($property: all, $duration: .25s, $easing: linear, $delay: null)
 * ---
 * $property: The transform property to perform
 * $duration: Transition duration in seconds
 * $easing: linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end
 * $delay: If set in seconds, transition will be delayed
 * Generate vendor-prefixed transition rules
 *
 *
 * transition-property($property...)
 * ---
 * Set transition for one or more properties
 *
 *
 * transition-duration($duration)
 * ---
 * $duration: Duration in seconds
 *
 *
 * transition-delay($delay)
 * ---
 * $delay: Delay of transition in seconds
 *
 *
 * transition-function($function)
 * ---
 * $function: linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end
 *
 *
 * ul-reset
 * ---
 * Disable list-style, set margin and padding to zero
 */


/**
 * Mixins
 **/

@mixin active-color($color, $active: null, $type: 'color') {
	@if $active == null { $active: darken($color, 20%); }
	&, &:link, &:visited {
		@if $type == 'color' { color: $color; }
		@elseif $type == 'background' { background: $color; }
	}
	&:hover, &:active {
		@if $type == 'color' { color: $active; }
		@elseif $type == 'background' { background: $active; }
	}
}

@mixin backface-visibility($visibility){
	-webkit-backface-visibility: $visibility;
	-moz-backface-visibility: $visibility;
	backface-visibility: $visibility;
}

@mixin box-shadow($shadow...) {
	-webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
	box-shadow: $shadow;
}

@mixin box-sizing($boxmodel) {
	-webkit-box-sizing: $boxmodel;
	-moz-box-sizing: $boxmodel;
	box-sizing: $boxmodel;
}

@mixin content-columns($column-count, $column-gap: 15px) {
	-webkit-column-count: $column-count;
	-moz-column-count: $column-count;
	column-count: $column-count;
	-webkit-column-gap: $column-gap;
	-moz-column-gap: $column-gap;
	column-gap: $column-gap;
}

@mixin placeholder-color($color) {
	&::-moz-placeholder           { color: $color;   // Firefox
		opacity: 1; } // See https://github.com/twbs/bootstrap/pull/11526
	&:-ms-input-placeholder       { color: $color; } // Internet Explorer 10+
	&::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

// Transformations
@mixin scale($x, $y: null) {
	@if $y == null {
		-webkit-transform: scale($x);
		-ms-transform: scale($x); // IE9 only
		-o-transform: scale($x);
		transform: scale($x);
	}
	@else {
		-webkit-transform: scale($x, $y);
		-ms-transform: scale($x, $y); // IE9 only
		-o-transform: scale($x, $y);
		transform: scale($x, $y);
	}
}
@mixin skew($x, $y: null) {
	@if $y == null {
		-webkit-transform: skew($x);
		-ms-transform: skew($x);
		-o-transform: skew($x);
		transform: skew($x);
	}
	@else {
		-webkit-transform: skewX($x) skewY($y);
		-ms-transform: skewX($x) skewY($y);
		-o-transform: skewX($x) skewY($y);
		transform: skewX($x) skewY($y);
	}
}
@mixin translate($x, $y: null) {
	@if $y == null {
		-webkit-transform: translate($x, $x);
		-ms-transform: translate($x, $x); // IE9 only
		-o-transform: translate($x, $x);
		transform: translate($x, $x);
	}
	@else {
		-webkit-transform: translate($x, $y);
		-ms-transform: translate($x, $y); // IE9 only
		-o-transform: translate($x, $y);
		transform: translate($x, $y);
	}
}
@mixin rotate($x, $y: null) {
	@if $y == null {
		-webkit-transform: rotateX($x);
		-ms-transform: rotateX($x); // IE9 only
		-o-transform: rotateX($x);
		transform: rotateX($x);
	}
	@else {
		-webkit-transform: rotate($x, $y);
		-ms-transform: rotate($x, $y); // IE9 only
		-o-transform: rotate($x, $y);
		transform: rotate($x, $y);
	}
}
@mixin transform-origin($origin) {
	-webkit-transform-origin: $origin;
	-moz-transform-origin: $origin;
	-ms-transform-origin: $origin; // IE9 only
	transform-origin: $origin;
}


/**
 * Generate CSS transition with vendor prefixes
 **/
@mixin transition-property($property...) {
	@if $property == transform {
		transition-property: transform;
		-o-transition-property: -o-transform;
		-moz-transition-property: -moz-transform;
		-webkit-transition-property: -webkit-transform;
	}
	@else {
		transition-property: $property;
		-o-transition-property: $property;
		-moz-transition-property: $property;
		-webkit-transition-property: $property;
	}
}
@mixin transition-duration($duration) {
	transition-duration: $duration;
	-o-transition-duration: $duration;
	-moz-transition-duration: $duration;
	-webkit-transition-duration: $duration;
}
@mixin transition-delay($delay) {
	-webkit-transition-delay: $delay;
	transition-delay: $delay;
}
@mixin transition-function($function) {
	transition-timing-function: $function;
	-o-transition-timing-function: $function;
	-moz-transition-timing-function: $function;
	-webkit-transition-timing-function: $function;
}
@mixin trans($property: all, $duration: 0.25, $easing: linear, $delay: null){
	@include transition-property($property);
	@include transition-duration($duration);
	@include transition-function($easing);

	@if $delay != null { @include transition-delay($delay); }
}

/**
 * Generate border-radius with vendor prefixes
 **/
@mixin radius($top-left: 5px, $top-right: null, $bottom-right: null, $bottom-left: null) {
	@if $top-right == null {$top-right: $top-left}
	@if $bottom-right == null {$bottom-right: $top-left}
	@if $bottom-left == null {$bottom-left: $top-left}

	/* FF1+ */
	-moz-border-radius-topleft: $top-left;
	-moz-border-radius-topright: $top-right;
	-moz-border-radius-bottomright: $bottom-right;
	-moz-border-radius-bottomleft: $bottom-left;

	/* Saf3-4, iOS 1+, Android 1.5+ */
	-webkit-border-top-left-radius: $top-left;
	-webkit-border-top-right-radius: $top-right;
	-webkit-border-bottom-right-radius: $bottom-right;
	-webkit-border-bottom-left-radius: $bottom-left;

	/* Opera 10.5, IE9, Saf5, Chrome, FF4 */
	border-top-left-radius: $top-left;
	border-top-right-radius: $top-right;
	border-bottom-right-radius: $bottom-right;
	border-bottom-left-radius: $bottom-left;

	/* useful if you don't want a bg color from leaking outside the border: */
	-moz-background-clip: padding; -webkit-background-clip: padding-box; background-clip: padding-box;
}

/**
 * Center elements vertically and/or horizontally. Parent should not have static positioning.
 * V: vertical, H: horizontal, null: both
 **/
@mixin center($axis:null) {
	position: absolute;
	word-break: break-word;
	@if $axis == null {
		top: 50%;
		left: 50%;
		margin-right: -50%;
		@include translate(-50%, -50%);
	}
	@if $axis == 'H' {
		left: 50%;
		margin-right: -50%;
		@include translate(-50%, 0);
	}
	@if $axis == 'V' {
		top: 50%;
		@include translate(0, -50%);
	}
}

@mixin cover-image() {
	min-width: 100%;
	min-height: 100%;
	width: auto;
	height: auto;
	// Not supported by IE at all
	-o-object-fit: cover;
	object-fit: cover;
}

@mixin rwd-typo($breakpoint: 480px, $h1: 36px, $h2: 30px, $h3: 24px, $h4: 18px, $h5: 14px, $h6: 12px) {
	@media (max-width: $breakpoint) {
		$sizes: $h1, $h2, $h3, $h4, $h5, $h6;
		@for $i from 1 through 6 {
			@if nth($sizes, $i) != null or nth($sizes, $i) != 0 {
				h#{$i}, .h#{$i} { font-size: nth($sizes, $i) / $breakpoint * 100 + vw; }
			}
		}
	}
}

/**
 * Flexbox stuff
 */

@mixin flex {
	display: -ms-flex;
	display: -webkit-flex;
	display: flex;
}

[class^=flex-wrap-] { display: block; }

@each $size_min in $flex_container_breakpoints {

	// Generate singular class, e.g. .flex-wrap-md

	.flex-wrap-#{nth($size_min, 1)} {
		@media (min-width: #{nth($size_min, 2)}) {
			@include flex;
		}
	}

	// Generate from-to classes, e.g. .flex-wrap-xs-md

	@each $size_max in $flex_container_breakpoints {

		// Generate class only if min < max

		@if (nth($size_min, 2) < nth($size_max, 2)) {
			.flex-wrap-#{nth($size_min, 1)}-#{nth($size_max, 1)} {
				@media (min-width: nth($size_min, 2)) and (max-width: nth($size_max, 2) - 1) {
					@include flex;
				}
			}
		}
	}
}

// Extend -xs as global class
.flex-wrap { @extend .flex-wrap-xs; }

@mixin flex-direction($direction) {
	-webkit-flex-direction: $direction;
	flex-direction: $direction;
}
@mixin flex-wrap($wrap) {
	-webkit-flex-wrap: $wrap;
	flex-wrap: $wrap;
}
@mixin flex-flow($direction, $flow) {
	-webkit-flex-flow: $direction $flow;
	flex-flow: $direction $flow;
}
@mixin justify-content($justify) {
	-webkit-justify-content: $justify;
	justify-content: $justify;
}
@mixin align-items($align) {
	-webkit-align-items: $align;
	align-items: $align;
}
@mixin align-content($align) {
	-webkit-align-content: $align;
	align-content: $align;
}
@mixin order($order) {
	@if (round($order) == $order) {
		-webkit-order: $order;
		order: $order;
	}
	@else {
		&:before {
			display: block;
			font-family: monospace;
			content: "Error: flex order requires integer numbers."
		}
	}
}
@mixin flex-grow($grow) {
	@if (round($grow) == $grow) {
		-webkit-flex-grow: $grow;
		flex-grow: $grow;
	}
	@else {
		&:before {
			display: block;
			font-family: monospace;
			content: "Error: flex-grow requires integer numbers."
		}
	}
}
@mixin flex-shrink($shrink) {
	@if (round($shrink) == $shrink) {
		-webkit-flex-shrink: $shrink;
		flex-shrink: $shrink;
	}
	@else {
		&:before {
			display: block;
			font-family: monospace;
			content: "Error: flex-shrink requires integer numbers."
		}
	}
}
@mixin flex-basis($basis) {
	-webkit-flex-basis: $basis;
	flex-basis: $basis;
}


/**
 * Resets and fixes
 **/

@mixin ul-reset {
	margin: 0;
	padding: 0;
	list-style-type: none;
}

@mixin modalfix {
	#zaj_bootstrap_modal .modal-content { word-break: break-word; }
}

body {
	// Prevent iOS Safari from resizing fonts?
	-webkit-text-size-adjust: 100%;

	// Font smoothing
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

// Remove underlines and outlines
a, input, textarea {
	&, &:focus, &:active, &:hover, &:-moz-focusring {
		outline: none;
		text-decoration: none;
	}
}

// Remove Win10 select arrows
select::-ms-expand { display: none; }

// Disable resizable textboxes
textarea { resize: none; }

// Fix FF/IE table display bug
table { table-layout: fixed; }

// Override default Bootstrap styling for .nav <a> tags
.nav > li {
	display: inline-block;
	> a {
		padding: 0;
		&:focus, &:active {
			background: none;
		}
	}
}